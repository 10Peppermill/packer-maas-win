#!/usr/bin/env python3

from curtin.config import load_command_config
from curtin.util import load_command_environment

from subprocess import check_call
import os
import shutil
import tempfile


def write_maas_md_cfg(target, config):
    """Write the MAAS credentials to the deployed filesystem.

    Writes the MAAS credentials to the 6th partition which maps to
    /altbootbank on the booted system. /altbootbank was chosen because it
    is the largest writable filesystem which is easily accessible by both
    Curtin and the %firstboot script.
    """
    altbootbank_blkdev = None
    # The curtin-hooks are stored on the first partition so Curtin finds the
    # hooks before encountering VMFS. The first partition is not visible in
    # the booted system. Use the block device for the partition Curtin was
    # found on and change the partition to find /altbootbank which is
    # visible on the booted system.
    with open('/proc/mounts', 'r') as mounts:
        for line in mounts.readlines():
            mount = line.split()
            blkdev = mount[0]
            mount_point = mount[1]
            if mount_point == target:
                altbootbank_blkdev = '%s6' % blkdev[0:-1]
                break

    if altbootbank_blkdev is None:
        raise Exception('ERROR: Unable to find /altbootbank block device!')

    altbootbank_mount_point = tempfile.mkdtemp(prefix='curtin-hooks-')
    check_call(['mount', altbootbank_blkdev, altbootbank_mount_point])

    maas_cfg_path = os.path.join(altbootbank_mount_point, 'maas', 'maas.cfg')
    with open(maas_cfg_path, 'w') as f:
        f.write(config['cloudconfig']['maas-cloud-config']['content'])

    check_call(['umount', altbootbank_blkdev])


def cleanup():
    """Remove curtin-hooks so its as if we were never here."""
    curtin_dir = os.path.dirname(__file__)
    shutil.rmtree(curtin_dir)


def main():
    state = load_command_environment()
    config = load_command_config(None, state)

    write_maas_md_cfg(state['target'], config)
    cleanup()


if __name__ =="__main__":
    main()
