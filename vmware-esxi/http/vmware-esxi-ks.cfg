vmaccepteula

# The root password for the deployed image
rootpw password123!

install --firstdisk

# Sets VMware ESXi licensing key. If not included installs in
# evaluation mode.
# serialnum --esx=XXXXX-XXXXX-XXXXX-XXXXX-XXXXX

network --bootproto=dhcp

%post --interpreter=busybox
# The install reboots by default, when creating an image halt so Packer can
# run post-processors and finish.
halt

%firstboot --interpreter=busybox
# Allow script to continue even if something fails to get as much configuration
# done as possible.
set +e

# Enable SSH
# vim-cmd hostsvc/enable_ssh
# vim-cmd hostsvc/start_ssh

# Enable ESXi shell
# vim-cmd hostsvc/enable_esx_shell
# vim-cmd hostsvc/start_esx_shell

# Extend VMFS to the size of the disk. This is normally done by Curtin but
# must be done here due to VMFS requiring proprietary tools.
BLK_DEV=$(esxcli storage vmfs extent list | awk '/datastore1/ { print $4 }')
BLK_DEV="/dev/disks/$BLK_DEV"
printf 'Y\nFix\n' | partedUtil fixGpt $BLK_DEV
PART_START=$(partedUtil get $BLK_DEV | awk '/^3 / { print $2 }')
END_DISK=$(partedUtil getUsableSectors $BLK_DEV | cut -d ' ' -f2)
partedUtil resize $BLK_DEV 3 $PART_START $END_DISK
vmkfstools --growfs $BLK_DEV:3 $BLK_DEV:3

# Track whether any network configuration failed.
failed=0

# Apply network configuration
/altbootbank/maas/netplan-esxi -c /altbootbank/maas/curtin-networking.cfg apply || failed=1

# Temporarily disable firewall so we can communicate with MAAS
esxcli network firewall set --enabled=false || failed=1

MAAS_MD_GET="/altbootbank/maas/maas-md-get -c /altbootbank/maas/maas.cfg"

# Copy SSH keys from MAAS
$MAAS_MD_GET latest/meta-data/public-keys >> /etc/ssh/keys-root/authorized_keys || failed=1

# Get the FQDN for the machine from MAAS and set it.
esxcli system hostname set --fqdn=$($MAAS_MD_GET latest/meta-data/local-hostname) || failed=1

# Configure NTP
$MAAS_MD_GET latest/meta-data/vendor-data | /altbootbank/maas/vendor-data-esxi || failed=1

# Tell MAAS deployment has finished by retrieving user-data. user-data is executed if it
# uses an interrupter found on the system(/bin/sh, /usr/bin/env python,
# or /usr/bin/env python3)
$MAAS_MD_GET latest/user-data > /altbootbank/maas/user-data || failed=1
chmod +x /altbootbank/maas/user-data || failed=1
/altbootbank/maas/user-data || failed=1

# Reenable firewall
esxcli network firewall set --enabled=true || failed=1

# Cleanup MAAS first boot files.
if [ $failed -eq 0 ]; then
    rm -rf /altbootbank/maas
fi
